remaining_budget = 400
remaining_budget = 400e9
remaining_budget
co2_per_y = 42.2e9
remaining_budget / co2_per_y
start_date = as.Date("2020-01-01")
library(tidyverse)
co2_per_s = 1337
start_date = as.POSIXct("2020-01-01")
start_date
date_of_publish = as.POSIXct("2022-09-29")
date_of_publish
date_of_publish - start_date
start_date = as.POSIXct("2020-01-01 00:00:00")
start_date
start_date = as.POSIXct("2020-01-01 00:00:01")
start_date
date_of_publish = as.POSIXct("2022-09-29 00:00:01")
date_of_publish - start_date
difftime(date_of_publish, start_date)
a = difftime(date_of_publish, start_date)
a
class(a)
attributes(a)
?diffitme
?difftime
a = difftime(date_of_publish, start_date, units="secs")
a
seconds_between_start_and_publish = difftime(date_of_publish, start_date, units="secs")
seconds_between_start_and_publish
carbon_used_carbon_unitl_publish = co2_per_s * seconds_between_start_and_publish
carbon_used_carbon_unitl_publish
carbon_used_carbon_unitl_publish = co2_per_s * as.numeric(seconds_between_start_and_publish)
carbon_used_carbon_unitl_publish
left_carbon_on_date_of_publish = remaining_budget - carbon_used_carbon_unitl_publish
left_carbon_on_date_of_publish
time_left = left_carbon_on_date_of_publish / co2_per_y
time_left
years = floor(time_left)
years
floor(time_left) %/% time_left
floor(time_left) %% time_left
time_left %/% floor(time_left)
time_left %% floor(time_left)
days = 365 * (time_left %% floor(time_left))
days
years
left_carbon_on_date_of_publish
library(tidyverse)
library(here)
library(glue)
# path --------------------------------------------------------------------
path = here("js/out.csv")
# data --------------------------------------------------------------------
data = read_csv(path)
head(data)
# longer ------------------------------------------------------------------
pivot_longer(
data,
cols = where(is.numeric),
names_to = "type",
values_to = "vals"
)
library(tidyverse)
# longer ------------------------------------------------------------------
pivot_longer(
data,
cols = where(is.numeric),
names_to = "type",
values_to = "vals"
) %>%
select(-matches("CET"))
# longer ------------------------------------------------------------------
pivot_longer(
data,
cols = where(is.numeric),
names_to = "type",
values_to = "vals"
) %>%
select(-matches("CET")) -> df
ggplot(df) +
geom_path(
aes(
x = date,
y = vals,
color = type
)
)
head(df)
dim(df)
df %>% count(type)
ggplot(df) +
geom_path(
aes(
x = date,
y = vals,
group = type
)
)
View(df)
str(df)
# longer ------------------------------------------------------------------
pivot_longer(
data,
cols = where(is.numeric),
names_to = "type",
values_to = "vals"
) %>%
mutate(
date = as.Date(date)
) %>%
select(-matches("CET")) -> df
# longer ------------------------------------------------------------------
pivot_longer(
data,
cols = where(is.numeric),
names_to = "type",
values_to = "vals"
) %>%
mutate(
date = as.Date(date, "%d.%m.%Y")
) %>%
select(-matches("CET")) -> df
head(df)
ggplot(df) +
geom_path(
aes(
x = date,
y = vals,
group = type
)
)
ggplot(df) +
geom_path(
aes(
x = date,
y = vals,
col = type
)
)
ggplot(df %>% filter(date == as.Date("11-09-2022"))) +
geom_path(
aes(
x = date,
y = vals,
col = type
)
)
df %>% filter(date == as.Date("11-09-2022"))
df$date
max(df$date)
ggplot(df %>% filter(date == as.Date("2022-09-11"))) +
geom_path(
aes(
x = date,
y = vals,
col = type
)
)
(df <- tibble(
item_name = c("a", "a", "b", "b"),
group = c(1, NA, 1, 2),
value1 = c(1, NA, 3, 4),
value2 = c(4, 5, NA, 7)
))
df %>%
filter(
across(
where(is.numeric),
~ !is.na(.x)
)
)
df %>%
filter(
if_any(
where(is.numeric),
~ !is.na(.x)
)
)
df %>%
filter(
if_all(
where(is.numeric),
~!is.na(.x)
)
)
library(here)
library(tidyverse)
library(here)
library(glue)
library(data.table)
library(readxl)
library(sf)
# dir to data -------------------------------------------------------------
dir_data = here("data/photovoltaik/")
# files -------------------------------------------------------------------
files = dir(dir_data, ".*\\.xlsx$", full.names = T)
files
# names -------------------------------------------------------------------
bundesland = gsub(".*\\/Anlagen.*_(.*)\\.xlsx", "\\1", files)
# data --------------------------------------------------------------------
data = map(files, read_xlsx) %>% setNames(bundesland)
df = bind_rows(data, .id="bl")
# plots -------------------------------------------------------------------
ggplot2::theme_set(theme_light())
# anzahl an solaranlagen pro bundesland -----------------------------------
df %>%
count(bl) %>%
mutate(bl = fct_reorder(bl, n)) %>%
ggplot() +
geom_col(aes(n, bl)) +
labs(
x = "#",
y = "",
title = "Anzahl an Solaranlagen pro BL"
) -> p1
p1
# eingespeister strom zeit pro bundesland -------------------------
df_long = df %>%
pivot_longer(cols = matches("\\d{4}"),
names_to = "year",
values_to = "vals") %>%
mutate(year = str_match(year, ".*(\\d{4}).*")[, 2],
bl = tolower(bl))
df_long %>%
group_by(bl, year) %>%
summarise(
einspeisung = sum(vals),
) %>%
mutate(
year = as.numeric(year)
) %>%
ungroup() %>%
ggplot() +
geom_line(
aes(year, einspeisung, color=bl)
) +
labs(
x = "",
y = "Einspeisung [kWh]",
title = "Einspeisung in das Stromnetz",
subtitle = "(nach Bundesland und Jahr)"
)
# wie viel eingespeiste energie pro qm pro bundesland
bls = geodata::gadm("Austria", level=1, path=tempdir())
bls_geo = st_as_sf(bls) %>%
select(NAME_1) %>%
mutate(
bl = tolower(NAME_1),
area_sqkm = st_area(geometry) / 1e6,
bl = str_replace(bl, "ö", "oe"),
bl = str_replace(bl, "ä", "ae")
) %>%
st_drop_geometry() %>%
right_join(df_long, ., by=c("bl")) -> solar_with_area
bls_geo %>%
group_by(
bl
) %>%
filter(year == 2021) %>%
summarise(
area = area_sqkm[[1]],
sum_einspeisung = sum(vals)
) %>% mutate(
einspeisung_pro_sqkm = as.numeric(sum_einspeisung / area)
) %>%
mutate(bl = fct_reorder(bl, einspeisung_pro_sqkm)) -> einspeisung_pro_sqkm
ggplot(einspeisung_pro_sqkm) +
geom_col(
aes(
x = bl,
y = einspeisung_pro_sqkm
),
fill = "#cccccc",
color = "black"
) +
labs(
x = "",
y = "Einspeisung [kWh]",
title = "Einspeisung aus Photovoltaik je Quadratkilometer und Bundesland 2021"
)
# welche plz hat die meisten photovoltaik-anlagen -------------------------
df %>%
group_by(Plz) %>%
summarise(n = n(),
ort = Ort[[1]]) %>%
arrange(desc(n))
path=here("~/Downloads/daily_in_situ_co2_mlo.csv")
data = read_csv(path)
head(data)
View(data)
data = read_csv(path, skip = 33)
head(data)
library(tidyverse)
library(here)
library(lubridate)
head(data)
data %>%
rename(
year = 1
) %>%
mutate(
date = as.Date(glue("{year}-{Mn}-{Dy}"))
)
data %>%
rename(
year = 1
) %>%
mutate(
date = as.Date(glue("{year}-{Mn}-{Dy}"))
) -> data
ggplot(data) +
geom_line(
aes(
x = date,
y = CO2
)
)
data %>%
rename(
year = 1
) %>%
mutate(
date = as.Date(glue("{year}-{Mn}-{Dy}")),
year = year(date)
) -> data
data
tail(data)
max(data$CO2)
max(data$CO2, na.rm = T)
data %>% filter(CO2 == max(CO2))
data %>% filter(CO2 == max(CO2, na.rm = T))
library(tidyverse)
library(here)
library(readxl)
url = "https://ec.europa.eu/energy/observatory/reports/latest_prices_with_taxes.xlsx"
file = paste0(tempdir(), "/", "temp.xlsx")
download.file(url, file)
data = readxl::read_xlsx(file, sheet = 2)
head(data)
# get the date (in col 5 header) ------------------------------------------------------------
col5_header = names(data)[[5]]
date_unformatted = gsub(".*(\\d{1,2}/\\d{1,2}/\\d{1,2})$", "\\1", col5_header)
date = as.Date(date_unformatted, format="%m/%d/%y")
daet
date
# format data --------------------------------------------------------------
new_names = c("country", "super95", "diesel", "heizöl")
data = data[,1:length(new_names)]
names(data) = new_names
data = data[!is.na(data$country) & !is.na(data$diesel), ]
new_data = lapply(seq_along(data), function(i){
if(i != 1){
ret = as.numeric(gsub(",", "", data[[i]]))
}else{
ret = data[[i]]
}
ret
})
new_data = as.data.frame(new_data)
new_data = setNames(new_data, names(data))
new_data = new_data[1:27, ]
new_data[["date"]] = date
# replace Czech Rep. ------------------------------------------------------
new_data$country = ifelse(new_data$country == "Czechia", "Czech Rep.", new_data$country)
# make german names -------------------------------------------------------
res = sapply(new_data$country, function(x) {
switch(
x,
"Austria" = "Österreich",
"Belgium" = "Belgien",
"Bulgaria" = "Bulgarien",
"Croatia" = "Kroatien",
"Cyprus" = "Zypern",
"Denmark" = "Dänemark",
"Estonia" = "Estland",
"Finland" = "Finnland",
"France" = "Frankreich",
"Germany" = "Deutschland",
"Greece" = "Griechenland",
"Hungary" = "Ungarn",
"Czech Rep." = "Tschechien",
"Ireland" = "Irland",
"Italy" = "Italien",
"Latvia" = "Lettland",
"Lithuania" = "Litauen",
"Luxembourg" = "Luxemburg",
"Malta" = "Malta",
"Netherlands" = "Niederlanden",
"Poland" = "Polen",
"Portugal" = "Portugal",
"Romania" = "Rumänien",
"Slovakia" = "Slovakei",
"Slovenia" = "Slowenien",
"Spain" = "Spanien",
"Sweden" = "Schweden",
)
})
new_data[["country_ger"]] = res
# save data ---------------------------------------------------------------
fn = sprintf("output/weekly_fuel_prices/weeky_fuel_prices.csv")
dir = dirname(fn); if(!dir.exists(dir)) dir.create(dir, recursive = T)
write.csv(new_data, fn)
url = "https://ec.europa.eu/energy/observatory/reports/latest_prices_with_taxes.xlsx"
file = paste0(tempdir(), "/", "temp.xlsx")
download.file(url, file)
data = readxl::read_xlsx(file, sheet = 2)
# get the date (in col 5 header) ------------------------------------------------------------
col5_header = names(data)[[5]]
date_unformatted = gsub(".*(\\d{1,2}/\\d{1,2}/\\d{1,2})$", "\\1", col5_header)
date = as.Date(date_unformatted, format="%m/%d/%y")
date
